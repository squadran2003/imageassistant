name: Deploy to EC2

on:
    workflow_run:
      workflows: ["BuildandTest"]
      types:
        - completed
    workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo $secrets.EC2_SSH_PRIVATE_KEY
          echo $secrets.SERVER_ADDRESS
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.SERVER_ADDRESS }}" >> ~/.ssh/known_hosts

      - name: SSH into EC2 and deploy
        run: |
            ssh -i ~/.ssh/id_rsa ubuntu@"${{ secrets.SERVER_ADDRESS }}" "
                echo 'Starting deployment on server...'

                # Check if directory exists
                if [ ! -d /home/ubuntu/imageassistant ]; then
                  echo 'ERROR: Directory /home/ubuntu/imageassistant does not exist!'
                  ls -la /home/ubuntu/
                  exit 1
                fi
                cd /home/ubuntu/imageassistant/

                echo 'Pulling latest changes from GitHub...'
                git pull

                # Initialize on your main server
                sudo docker swarm init || true
                
                sudo docker stack deploy -c docker-compose-prod.yaml --with-registry-auth imageassistant
                
                echo 'Checking container status...'
                sudo docker ps
                
                echo 'Checking container logs (last 20 lines of each)...'
                for container in \$(sudo docker-compose -f docker-compose-prod.yaml ps -q); do
                echo '===== Container \$(sudo docker inspect --format=\"{{.Name}}\" \$container) ====='
                sudo docker logs --tail=20 \$container
                done
                
                echo 'Checking for any container restarts or failures...'
                sudo docker ps -a --format '{{.Names}}\t{{.Status}}' | grep -i 'Restart'
                
                echo 'Deployment complete!'
              "