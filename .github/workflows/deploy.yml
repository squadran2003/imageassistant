name: Deploy to EC2

on:
    workflow_run:
      workflows: ["BuildandTest"]
      types:
        - completed
    workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo $secrets.EC2_SSH_PRIVATE_KEY
          echo $secrets.SERVER_ADDRESS
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.SERVER_ADDRESS }}" >> ~/.ssh/known_hosts

      - name: SSH into EC2 and deploy
        run: |
            ssh -i ~/.ssh/id_rsa ubuntu@"${{ secrets.SERVER_ADDRESS }}" "
                echo 'Starting deployment on server...'

                # Check if directory exists
                if [ ! -d /home/ubuntu/imageassistant ]; then
                  echo 'ERROR: Directory /home/ubuntu/imageassistant does not exist!'
                  ls -la /home/ubuntu/
                  exit 1
                fi
                cd /home/ubuntu/imageassistant/

                echo 'Pulling latest changes from GitHub...'
                sudo git pull

                # Validate docker-compose file
                echo 'Validating docker-compose file...'
                sudo docker-compose -f docker-compose-prod.yaml config > /dev/null
                if [ \$? -ne 0 ]; then
                  echo 'ERROR: Invalid docker-compose file!'
                  exit 1
                fi

                export TAG=$(date +%Y%m%d%H%M%S)
                echo \"Using image tag: \$TAG\"

                echo 'Building fresh images...'
                sudo -E docker-compose -f docker-compose-prod.yaml build --no-cache

                # Initialize on your main server
                sudo docker swarm init || true


                # Deploy stack with TAG env var properly passed
                echo 'Deploying stack with tag \$TAG...'
                sudo -E docker stack deploy -c docker-compose-prod.yaml --with-registry-auth --prune imageassistant
                
                # Check deployment status immediately
                echo 'Checking stack status...'
                sudo docker stack ls
                
                echo 'Checking services status...'
                sudo docker service ls
                
                echo 'Checking container logs (last 20 lines of each)...'
                for container in \$(sudo docker-compose -f docker-compose-prod.yaml ps -q); do
                echo '===== Container \$(sudo docker inspect --format=\"{{.Name}}\" \$container) ====='
                sudo docker logs --tail=20 \$container
                done
                
                echo 'Checking for any container restarts or failures...'
                sudo docker ps -a --format '{{.Names}}\t{{.Status}}' | grep -i 'Restart'
                
                echo 'Deployment complete!'
              "